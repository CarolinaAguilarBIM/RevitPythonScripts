"""
Script Name: Convert Group Members to Workplane-Hosted
Category: Automation
Purpose: Converts face-based or link-hosted family instances inside a group to workplane-hosted instances for plan-rotation flexibility.
Environment: Revit 2023, IronPython 3.4.1, RevitPythonShell, .NET 4.8
Functionality:
- Finds a model group by name (e.g., "S1.4B")
- Iterates through all family instances
- Creates new workplane-hosted instances at the same location
- Copies over editable parameters
- Deletes original instances
Inputs: Model group name, group members
Output: Console report of successfully converted elements
Status: âœ… Working
"""

import clr
clr.AddReference('RevitAPI')
clr.AddReference('RevitServices')

from Autodesk.Revit.DB import *
from RevitServices.Persistence import DocumentManager

# RPS context
doc = __revit__.ActiveUIDocument.Document
uidoc = __revit__.ActiveUIDocument

# Group to convert
target_group_name = "S1.4B"

# Find group
group = None
group_collector = FilteredElementCollector(doc).OfClass(Group)
for g in group_collector:
    if g.Name == target_group_name:
        group = g
        break

if not group:
    print("Group not found.")
else:
    group_member_ids = group.GetMemberIds()

    # Transaction start
    t = Transaction(doc, "Unhost Group Elements")
    t.Start()

    converted_count = 0

    for eid in group_member_ids:
        el = doc.GetElement(eid)
        if not el:
            continue

        # Only convert FamilyInstance elements hosted to RevitLinkInstance
        if isinstance(el, FamilyInstance) and isinstance(el.Host, RevitLinkInstance):
            location = el.Location
            if not isinstance(location, LocationPoint):
                print("Skipping: {} (no LocationPoint)".format(el.Name))
                continue

            point = location.Point
            symbol = el.Symbol
            level = doc.GetElement(el.LevelId)

            # Create unhosted copy
            new_inst = doc.Create.NewFamilyInstance(point, symbol, level, Structure.StructuralType.NonStructural)
            
            # Optional: copy instance parameters (basic approach)
            for param in el.Parameters:
                if param.IsReadOnly:
                    continue
                try:
                    new_param = new_inst.LookupParameter(param.Definition.Name)
                    if new_param and not new_param.IsReadOnly:
                        new_param.Set(param.AsValueString() if param.StorageType == StorageType.String else param.AsInteger() if param.StorageType == StorageType.Integer else param.AsDouble() if param.StorageType == StorageType.Double else param.AsElementId())
                except:
                    pass  # ignore transfer errors

            # Delete original
            doc.Delete(el.Id)
            converted_count += 1

    t.Commit()
    print("Converted {} hosted elements to unhosted.".format(converted_count))
